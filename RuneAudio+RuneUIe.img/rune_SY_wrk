#!/usr/bin/php
<?php
include('/srv/http/app/libs/runeaudio.php');
$start = microtime(true);
$savecpu_rp = 12;
$savecpu_mnt = 1;
$savecpu_smt = 480;
$savecpu_inc = 8;
$savecpu_sps = 43200;
$savecpu_avd = 86400;
$allmounted = 0;
$retriesmounting = 100;
ini_set('display_errors', '1');
error_reporting(E_ALL & ~E_NOTICE);
ini_set('error_log', '/var/log/runeaudio/rune_SY_wrk.log');
define('APP', '/srv/http/app/');
sysCmd('chmod 777 /run');

$redis = new Redis();
$redis->connect('/run/redis.sock');
$redis->set('disk_error', 0);

$retval = sysCmd("mpd --version | grep -o 'Music Player Daemon.*' | cut -f4 -d' '");
$mpdversion = trim($retval[0]);

$arch_db = $redis->get('hwplatformid');
$playerid_db = $redis->get('playerid');

$redis->del('w_lock');
$redis->del('w_queue');
$redis->del('notifications');

$arch = wrk_getHwPlatform($redis);
if ($arch_db !== $arch) $playerid_db = '';

$gitbranch = sysCmd("cd /var/www/ ; git branch | grep \"*\" | cut -d ' ' -f 2");
$redis->hSet('git', 'branch', $gitbranch[0]);

if ($playerid_db === '') {
	wrk_sysAcl();
	sysCmd('/var/www/db/redis_datastore_setup reset');
	wrk_setHwPlatform($redis);
	wrk_netconfig($redis,'reset');
	sysCmd('/srv/http/command/usbmount');
	wrk_mpdconf($redis,'stop');
	wrk_sourcecfg($redis,'reset');
	$redis->del('webradios');
	sysCmd('rm /mnt/MPD/Webradio/*');
	wrk_mpdconf($redis, 'reset');
	sysCmd('systemctl start mpd; mpc update');
	$count = sysCmd('mpc outputs | grep -c -i enabled');
	$countmpdenabled = $count[0];
	if ($countmpdenabled != 1) sysCmd("mpc enable only 1");
	sysCmd('/srv/http/command/switch_systemd_time_on.sh');
	wrk_avahiconfig($redis, strtolower(trim($redis->get('hostname'))));
	sysCmd('systemctl daemon-reload; systemctl restart rune_SY_wrk');
} else if ($redis->hGet('mpdconf', 'version') != $mpdversion) {
	wrk_sysAcl();
	sysCmd('/var/www/db/redis_datastore_setup check');
	wrk_mpdconf($redis,'stop');
	wrk_mpdconf($redis,'reset');
	wrk_sourcecfg($redis,'reset');
	sysCmd('systemctl start mpd; mpc update');
	sleep(1);
	$count = sysCmd('mpc outputs | grep -c -i enabled');
	$countmpdenabled = $count[0];
	if ($countmpdenabled != 1) sysCmd("mpc enable only 1");
	sysCmd('systemctl daemon-reload; systemctl restart rune_SY_wrk');
} else {
	$start2 = microtime(true);
	$firstlap = $start2-$start;
	$start3 = microtime(true);
	sysCmdAsync('/var/www/command/refresh_nics; /srv/http/db/redis_datastore_setup check');
	sysCmd('systemctl is-active chronyd && chronyc waitsync 12');
	$retval = sysCmd('hostname');
	$hn = trim($retval[0]);
	if (strtolower($hn) != strtolower(trim($redis->get('hostname')))) wrk_changeHostname($redis, $redis->get('hostname'));
	$activePlayer = $redis->get('activePlayer');
	if ($activePlayer === 'MPD') {
		sysCmd('systemctl stop spopd');
		$retval = sysCmd('systemctl is-active mpd');
		if ($retval[0] === 'active') wrk_mpdconf($redis,'refresh');
	} else if ($activePlayer === 'Spotify') {
		sysCmd('systemctl stop mpd; systemctl start spopd');
	} else {
		sysCmd('systemctl stop spopd');
		$redis->set('activePlayer', 'MPD');
		$retval = sysCmd('systemctl is-active mpd');
		if ($retval[0] === 'active') wrk_mpdconf($redis,'refresh');
	}
	$retval = sysCmd('mpc outputs | grep -c -i enabled');
	$countmpdenabled = $retval[0];
	if ($countmpdenabled != 1) {
		$retval = sysCmd('mpc outputs | grep -c -i output');
		$countmpdoutput = $retval[0];
		if ($countmpdoutput == 1) {
			sysCmd("mpc enable only 1");
		} else {
			if ($countmpdenabled == 0) {
				sysCmd("mpc disable only 'bcm2835 ALSA_1'");
				$countmpdenabled = $countmpdoutput;
			}
			if ($countmpdenabled == $countmpdoutput) {
				if ($countmpdoutput == 2) {
					sysCmd("mpc disable 'bcm2835 ALSA_1'");
				} else {
					sysCmd("mpc disable 'bcm2835 ALSA_1'; mpc disable 'bcm2835 ALSA_2'");
				}
			}
		}
	}
	$kernel = $redis->get('kernel');
	if ($redis->get('i2smodule') !== 'none') {
		switch($arch_db) {
			case '01':
				if ($kernel !== 'linux-rune-3.6.11-18-ARCH+') $loadi2s = true;
				break;
			case '10':
				$loadi2s = true;
				break;
		}
		if ($loadi2s === true) wrk_i2smodule($redis, $redis->get('i2smodule'));
	}
	if ($redis->get('udevil') === '1') sysCmd('systemctl start udevil');
	sysCmd("/var/www/command/orion_optimize.sh ".$redis->get('orionprofile')." ".$redis->get('hwplatformid'));
	sysCmd('systemctl start php-fpm rune_PL_wrk');
	$start4 = microtime(true);
	$starttime = ($start4-$start3)+$firstlap;
	if (($redis->hGet('local_browser', 'enable')) && (file_exists('/usr/bin/xinit'))) {
		sysCmdAsync('systemctl start local-browser');
	} else {
		sysCmdAsync('systemctl stop local-browser');
	}
	sysCmd('iwconfig wlan0 power off');
	sysCmdAsync('/var/www/command/usbmount; /var/www/command/set_mpd_volume.php; /var/www/command/debug_collector; /srv/http/command/rune_prio nice');
	$redis->close();
}
while (1) {
	$redis->pconnect('/run/redis.sock');
	if (!empty($redis->hGetAll('w_queue'))) {
		foreach ($redis->hGetAll('w_queue') as $jobID => $job) {
			$job = json_decode($job);
			switch($job->wrkcmd) {
				case 'xorgserver':
					$redis->sAdd('w_lock', $jobID);
					if ($job->action === 'start') {
						$redis->hSet('local_browser', 'enable', $job->args);
						wrk_xorgconfig($redis, $job->action, 0);
						sysCmd('systemctl start local-browser');
						sysCmdAsync('/srv/http/command/rune_prio nice');
					} else if ($job->action === 'stop') {
						$redis->hSet('local_browser', 'enable', $job->args);
						wrk_xorgconfig($redis, $job->action, 1);
						sysCmd('systemctl stop local-browser');
					} else if ($job->action === 'zoomfactor') {
						$zoomfactor = floatval(preg_replace("/[^0-9.]/", "", $job->args));
						if (($zoomfactor >= 0.1) && ($zoomfactor <= 10)) {
							$zoomfactor = trim(trim($zoomfactor, '0'));
							$redis->hSet('local_browser', $job->action, $zoomfactor);
							wrk_xorgconfig($redis, $job->action, $zoomfactor);
							if ($redis->hGet('local_browser', 'enable')) {
								sysCmd('systemctl restart local-browser');
								sysCmd('/srv/http/command/rune_prio nice');
							}
						}
					} else {
						$redis->hSet('local_browser', $job->action, $job->args);
						wrk_xorgconfig($redis, $job->action, $job->args);
						if ($redis->hGet('local_browser', 'enable')) {
							sysCmd('systemctl restart local-browser');
							sysCmd('/srv/http/command/rune_prio nice');
						}
					}
					$redis->sRem('w_lock', $jobID);
					break;
				case 'dlna':
					$redis->sAdd('w_lock', $jobID);
					if (($job->args->name !== $redis->hGet('dlna', 'name')) OR ($job->args->queueowner !== $redis->hGet('dlna', 'queueowner'))) {
						$redis->hSet('dlna', 'name', $job->args->name);
						$redis->hSet('dlna', 'queueowner', $job->args->queueowner);
						wrk_upmpdcli($redis, $redis->hGet('dlna', 'name'), $redis->hGet('dlna', 'queueowner'));
					}
					if ($job->action === 'start') {
						sysCmd('systemctl restart upmpdcli');
						$redis->hSet('dlna', 'enable', 1);
					} else {
						sysCmd('systemctl stop upmpdcli');
						$redis->hSet('dlna', 'enable', 0);
					}
					$redis->sRem('w_lock', $jobID);
					break;
				case 'hostname':
					$redis->sAdd('w_lock', $jobID);
					wrk_changeHostname($redis, $job->args);
					$retval = sysCmd('hostname');
					$hn = trim($retval[0]);
					if (strtolower($hn) === strtolower(trim($job->args))){
						$redis->set('hostname', trim($job->args));
					} else {
						$redis->set('hostname', $hn);
					}
					$hash = md5_file('/etc/mpd.conf');
					$redis->set('mpdconfhash', $hash);
					sleep(3);
					$redis->sRem('w_lock', $jobID);
					break;
				case 'i2smodule':
					$redis->sAdd('w_lock', $jobID);
					wrk_i2smodule($redis, $job->args);
					$ao = $redis->get('ao');
					if ($ao === 'bcm2835 ALSA_1' OR $ao === 'bcm2835 ALSA_2') {
						sysCmd('mpc enable only "bcm2835 ALSA"');
					} else {    
						sysCmd('mpc enable only "'.$ao.'"');
					}
					$redis->sRem('w_lock', $jobID);
					break;
				case 'audio_on_off':
					$redis->sAdd('w_lock', $jobID);
					wrk_audio_on_off($redis, $job->args);
					$ao = $redis->get('ao');
					if ($ao === 'bcm2835 ALSA_1' OR $ao === 'bcm2835 ALSA_2') {
						sysCmd('mpc enable only "bcm2835 ALSA"');
					} else {    
						sysCmd('mpc enable only "'.$ao.'"');
					}
					$redis->sRem('w_lock', $jobID);
					break;
				case 'kernelswitch':
					$redis->sAdd('w_lock', $jobID);
					if (wrk_kernelswitch($redis,$job->args)) {
						if ($job->args === 'linux-rune-rpi_3.12.13-rt21_wosa') {
							$redis->set('ao', 'snd_rpi_wsp_1');
							$redis->set('i2smodule', 'none');
							$redis->set('orionprofile', 'OrionV2');
						}
						$notification = new stdClass();
						$notification->title = 'Kernel switch';
						$notification->text = $job->args.' selected successfully, reboot reqired';
						wrk_notify($redis, 'kernelswitch', $notification, $jobID);
					}
					$redis->sRem('w_lock', $jobID);
					break;
				case 'lastfm':
					$redis->sAdd('w_lock', $jobID);
					if ($job->action === 'start') {
						if ($job->args->user != $redis->hGet('lastfm', 'user') OR $job->args->pass != $redis->hGet('lastfm', 'pass')) {
							$file = '/etc/mpdscribble.conf';
							$newArray = wrk_replaceTextLine($file, '', 'username =', 'username = '.$job->args->user, 'last.fm', 2);
							$newArray = wrk_replaceTextLine('', $newArray, 'password =', 'password = '.$job->args->pass, 'last.fm', 3);
							$fp = fopen($file, 'w');
							fwrite($fp, implode("", $newArray));
							fclose($fp);
							setLastFMauth($redis, $job->args);
						}
						if ($redis->hGet('spotify','enable') === '1') {
							$file = '/etc/spop/spopd.conf';
							$newArray = wrk_replaceTextLine($file, '', 'username =', 'username = '.$redis->hGet('lastfm','user'), 'api_endpoint', 1);
							$newArray = wrk_replaceTextLine('', $newArray, 'password =', 'password = '.$redis->hGet('lastfm','pass'), 'api_endpoint', 2);
							$newArray = wrk_replaceTextLine('', $newArray, 'plugins =', 'plugins = scrobble', '### System settings ###', 2);
							$fp = fopen($file, 'w');
							fwrite($fp, implode("", $newArray));
							fclose($fp);
							if ($redis->get('activePlayer') === 'Spotify') sysCmd('systemctl restart spopd');
						}
						sysCmd('systemctl restart mpdscribble');
						$redis->hSet('lastfm', 'enable', 1);
					}
					if ($job->action === 'stop') {
						sysCmd('systemctl stop mpdscribble');
						if ($redis->hGet('spotify','enable') === '1') {
							$file = '/etc/spop/spopd.conf';
							$newArray = wrk_replaceTextLine($file, '', 'plugins =', '#plugins = scrobble', '### System settings ###', 2);
							$fp = fopen($file, 'w');
							fwrite($fp, implode("", $newArray));
							fclose($fp);
							sysCmd('systemctl restart spopd');
						}
						$redis->hSet('lastfm', 'enable', 0);
					}
					$redis->sRem('w_lock', $jobID);
					break;
				case 'mpdcfg':
					$redis->sAdd('w_lock', $jobID);
					if ($job->action === 'update') {
						wrk_mpdconf($redis, 'update', $job->args, $jobID);
						wrk_mpdconf($redis, 'restart');
					}
					if ($job->action === 'reset') {
						wrk_mpdconf($redis, 'reset');
						wrk_mpdconf($redis, 'restart');
					}
					if ($job->action === 'switchao') {
						wrk_mpdconf($redis, 'switchao', $job->args, $jobID);
					}
					$redis->sRem('w_lock', $jobID);
					break;
				case 'mpdcfgman':
					$redis->sAdd('w_lock', $jobID);
					wrk_mpdconf($redis, 'stop');
					$fh = fopen('/etc/mpd.conf', 'w');
					fwrite($fh, $job->args);
					fclose($fh);
					wrk_mpdconf($redis, 'start');
					$redis->sRem('w_lock', $jobID);
					break;
				case 'mpdrestart':
					$redis->sAdd('w_lock', $jobID);
					wrk_mpdconf($redis, 'restart');
					$redis->sRem('w_lock', $jobID);
					break;
				case 'ashufflereset':
					$redis->sAdd('w_lock', $jobID);
					sysCmd('rm -f '.$redis->hget('mpdconf', 'playlist_directory').'/RandomPlayPlaylist.m3u');
					$redis->set('last_pl_randomfile', 'none');
					sysCmd('systemctl stop ashuffle');
					$file = '/usr/lib/systemd/system/ashuffle.service';
					$newArray = wrk_replaceTextLine($file, '', 'ExecStart=', 'ExecStart=/usr/bin/ashuffle -f '.$redis->hGet('mpdconf', 'playlist_directory').'/RandomPlayPlaylist.m3u');
					$fp = fopen($file, 'w');
					$return = fwrite($fp, implode("", $newArray));
					fclose($fp);
					if ('1' === $redis->get('globalrandom')) sysCmd('systemctl daemon-reload');
					$redis->sRem('w_lock', $jobID);
					break;
				case 'pl_ashuffle':
					$redis->sAdd('w_lock', $jobID);
					sysCmd('systemctl stop ashuffle; rm -f "'.$redis->hget('mpdconf', 'playlist_directory').'/RandomPlayPlaylist.m3u"');
					sysCmd('ln -sf "'.$redis->hget('mpdconf', 'playlist_directory').'/'.$job->args.'.m3u" "'.$redis->hget('mpdconf', 'playlist_directory').'/RandomPlayPlaylist.m3u"');
					$redis->set('last_pl_randomfile', 'exists');
					$redis->set('globalrandom', '1');
					$redis->sRem('w_lock', $jobID);
					break;
				case 'addrandomtracks':
					$redis->sAdd('w_lock', $jobID);
					$redis->set('addrandom', $job->args);
					sleep(3);
					$redis->sRem('w_lock', $jobID);
					break;
				case 'NTPswitch':
					$redis->sAdd('w_lock', $jobID);
					sysCmd('/srv/http/command/switch_'.$job->action.'_time_on.sh');
					$redis->sRem('w_lock', $jobID);
					break;
				case 'soxrmpd':
					$redis->sAdd('w_lock', $jobID);
					$redis->set('soxrmpdonoff', $job->action);
					wrk_mpdconf($redis, 'refresh');
					$redis->sRem('w_lock', $jobID);
					break;
				case 'playernamemenu':
					$redis->sAdd('w_lock', $jobID);
					wrk_playernamemenu($job->action);
					$redis->set('playernamemenu', $job->action);
					sysCmd('systemctl restart php-fpm || systemctl start php-fpm');
					$redis->sRem('w_lock', $jobID);
					break;
				case 'netcfg':
					$redis->sAdd('w_lock', $jobID);
					if ($job->action === 'reset') wrk_netconfig($redis,'reset',$job->args);
					if ($job->action === 'config') {
						$retval = wrk_netconfig($redis, 'writecfg', $job->args);
						if ($retval === 'reboot') {
							sysCmd('/var/www/command/rune_shutdown reboot');
							sysCmdAsync('systemctl reboot');
						}
					}
					if ($job->action === 'refresh') sysCmd('/var/www/command/refresh_nics');
					$redis->sRem('w_lock', $jobID);
					break;
				case 'apcfg':
					$redis->sAdd('w_lock', $jobID);
					if ($job->action === 'config') {
						$retval = wrk_apconfig($redis, 'writecfg', $job->args);
						if ($retval === 'reboot') {
							$notification = new stdClass();
							$notification->title = 'AccessPoint config';
							$notification->text = 'Config changed successfully, reboot reqired';
							wrk_notify($redis, 'kernelswitch', $notification, $jobID);
							sysCmd('/var/www/command/rune_shutdown reboot');
							sysCmdAsync('systemctl reboot');
						}
					}
					$redis->sRem('w_lock', $jobID);
					break;
				case 'ntpserver':
					$redis->sAdd('w_lock', $jobID);
					$redis->set('ntpserver', wrk_NTPsync($job->args));
					$redis->sRem('w_lock', $jobID);
					break;
				case 'orionprofile':
					$redis->sAdd('w_lock', $jobID);
					$profile = $job->args." ".$redis->get('hwplatformid');
					sysCmd("/var/www/command/orion_optimize.sh ".$profile);
					$redis->set('orionprofile', $job->args);
					$redis->sRem('w_lock', $jobID);
					break;
				case 'phprestart':
					$redis->sAdd('w_lock', $jobID);
					sysCmd('systemctl reload-or-restart php-fpm || systemctl start php-fpm');
					$redis->sRem('w_lock', $jobID);
					break;
				case 'sourcecfg':
					$redis->sAdd('w_lock', $jobID);
					if (wrk_sourcecfg($redis, $job->action, $job->args)) sysCmd('mpc update');
					$redis->sRem('w_lock', $jobID);
					break;
				case 'switchplayer':
					$redis->sAdd('w_lock', $jobID);
					$redis->sRem('w_lock', $jobID);
					break;
				case 'sysAcl':
					$redis->sAdd('w_lock', $jobID);
					wrk_sysAcl();
					$redis->sRem('w_lock', $jobID);
					break;
				case 'timezone':
					$redis->sAdd('w_lock', $jobID);
					sysCmd('timedatectl set-timezone '.$job->args);
					$redis->set('timezone', $job->args);
					$redis->sRem('w_lock', $jobID);
					break;
				case 'udevil':
					$redis->sAdd('w_lock', $jobID);
					if ($job->action === 'start') {
						sysCmd('systemctl start udevil');
						$redis->set('udevil', 1);
					} else {
						sysCmd('systemctl stop udevil');
						$redis->set('udevil', 0);
					}
					$redis->sRem('w_lock', $jobID);
					break;
				case 'wificfg':
					$redis->sAdd('w_lock', $jobID);
					if ($job->action === 'add') {
						wrk_wifiprofile($redis, $job->action, $job->args);
					} else if ($job->action === 'edit') {
						wrk_wifiprofile($redis, $job->action, $job->args);
					} else if ($job->action === 'delete') {
						wrk_wifiprofile($redis, $job->action, $job->args);
					} else if ($job->action === 'disconnect') {
						wrk_wifiprofile($redis, $job->action, $job->args);
					} else if ($job->action === 'connect') {
						wrk_wifiprofile($redis, $job->action, $job->args);
					}
					if ($job->action === 'scan') {
						$lock = $redis->Get('lock_wifiscan');
						if ($lock !== '1') ('/var/www/command/refresh_nics');
					}
					$redis->sRem('w_lock', $jobID);
					break;
				case 'wrkrestart':
					$redis->sAdd('w_lock', $jobID);
					sysCmd('systemctl reload-or-restart '.$job->args);
					$redis->sRem('w_lock', $jobID);
					break;
			}
			$redis->hDel('w_queue', $jobID);
			wrk_notify($redis, 'endjob', '', $jobID);
		}
	}
	if ((!$allmounted) && ($retriesmounting == 100)) {
		$allmounted = wrk_sourcemount($redis, 'mountall', null, true, true);
		$redis->set('allmounted', $allmounted);
		if ($allmounted && $redis->get('mpd_autoplay')) {
			$redis->set('mpd_playback_laststate', 'playing');
			wrk_mpdRestorePlayerStatus($redis);
		}
		$retriesmounting = 99;
	}
	$allmounted = $redis->get('allmounted');
	if ((!$allmounted) && ($savecpu_mnt-- === 0)) {
		if ($retriesmounting-- > 0) sysCmdAsync('nice --adjustment=2 /var/www/command/mount_async.php');
		$savecpu_mnt = 1750 + rand(0, 100);
	}
	if ($savecpu_rp-- === 0) {
		$retval = sysCmd('systemctl is-active ashuffle');
		if ($retval[0] == 'active') {
			if (file_exists($redis->hget('mpdconf', 'playlist_directory').'/RandomPlayPlaylist.m3u')) {
				$redis->set('last_pl_randomfile', 'exists');
				clearstatcache();
			} else {
				if ($redis->get('last_pl_randomfile') === 'exists') {
					unlink($redis->hget('mpdconf', 'playlist_directory').'/RandomPlayPlaylist.m3u');
					sysCmd('systemctl stop ashuffle');
					sleep(2);
					sysCmd('systemctl daemon-reload');
					sleep(2);
				}
				$redis->set('last_pl_randomfile', 'none');
			}
		}
		if (($redis->get('globalrandom')) && (!$redis->get('ashuffle_wait_for_play'))) {
			$nasmounts = count(scandir("/mnt/MPD/NAS"))-2;
			$usbmounts = count(scandir("/mnt/MPD/USB"))-2;
			$localstoragefiles = count(scandir("/mnt/MPD/LocalStorage"))-2;
			$retval = sysCmd('systemctl is-active ashuffle');
			if ($retval[0] == 'active') {
				if (($nasmounts == 0) && ($usbmounts == 0) && ($localstoragefiles == 0)) {
					sysCmd('systemctl stop ashuffle');
				}
			} else {
				if (($nasmounts == 0) && ($usbmounts == 0) && ($localstoragefiles == 0)) {
					// nothing to play, do nothing
				} else {
					$retval = sysCmd('ps -C mpd -o etimes=');
					$mpd_uptime = trim($retval[0]);
					if (intval($mpd_uptime) > intval($redis->get('ashuffle_start_delay'))) {
						sysCmd('systemctl start ashuffle');
						sysCmdAsync('/srv/http/command/rune_prio nice');
					}
				}
			}
		}
		$savecpu_rp = 25 + rand(0, 10);
	}
	if ($savecpu_inc-- === 0) {
		sysCmdAsync('nice --adjustment=2 /srv/http/command/internet_available_async.sh');
		$savecpu_inc = 1750 + rand(0, 100);
	}
	if ($savecpu_smt-- === 0) {
		$retval = sysCmd('cat /proc/asound/card?/pcm?p/sub?/hw_params | grep -v closed');
		if (!empty(trim($retval[0]))) {
			if (file_exists("/usr/bin/smartctl")) {
				$drive_list = sysCmd('smartctl --scan-open -- -H -i -s on | grep -v aborted');
				if (!empty($drive_list)) {
					foreach($drive_list as $drive) {
						$drive = trim($drive);
						if ($drive != "") {
							$command = "smartctl ".$drive." | grep -i -E 'Model:|Capacity:|-health self-|SMART support is'";
							$self_check = sysCmd($command);
							If (!empty($self_check)) {
								$smart_avalable = false;
								$smart_enabled = false;
								$smart_result = false;
								$smart_good = false;
								foreach ($self_check as $self_check_line) {
									$self_check_line = trim($self_check_line);
									if ($self_check_line != "") {
										if (strpos(' '.$self_check_line, 'SMART support is')) {
											if (strpos(' '.$self_check_line, 'Available')) {
												$smart_avalable = true;
											} else if (strpos(' '.$self_check_line, 'Enabled')) {
												$smart_enabled = true;
											}
										}
										if (strpos(' '.$self_check_line, '-health self-')) {
											$smart_result = true;
											if (strpos(' '.$self_check_line, 'OK')) {
												$smart_good = true;
											} else if (strpos(' '.$self_check_line, 'PASSED')) {
												$smart_good = true;
											}
										}
									}
								}
								if ($smart_avalable && $smart_enabled && $smart_result && !$smart_good) $redis->set('disk_error', 1);
							}
						}
					}
				}
			}
		}
		if ($redis->get('disk_error')) {
			$savecpu_smt = 170 + rand(0, 20);
		} else {
			$savecpu_smt = 2350 + rand(0, 100);
		}
	}
	if ($savecpu_sps-- === 0) {
		$savecpu_sps = 43100 + rand(0, 200);
		if ($redis->get('activePlayer') === 'Airplay') {
			$savecpu_sps = 7100 + rand(0, 200);
		} else {
			sysCmd('systemctl restart shairport-sync');
		}
	}
	if ($savecpu_avd-- === 0) {
		$savecpu_avd = 86300 + rand(0, 200);
		sysCmd('systemctl restart avahi-daemon');
	}
	usleep(500000);
}
$redis->close();
